DEFINE COMPONENT Absorption_sample_2

DEFINITION PARAMETERS (string material_datafile_i="",string material_datafile_o="", string material_datafile_a="")

SETTING PARAMETERS (radius_o=0,xwidth_o=0,yheight_o=1,zdepth_o=0,radius_i=0,xwidth_i=0,yheight_i=0.0,zdepth_i=0,x_i=0,y_i=0,z_i=0,radius_a=0,xwidth_a=0,yheight_a=0.0,zdepth_a=0,x_a=0,y_a=0,z_a=0,rho_a=0,rho_i=0,rho_o=0)

OUTPUT PARAMETERS (prms_i,prms_o,prms_a,t_i,t_o,t_a)

/* X-ray parameters: (x,y,z,kx,ky,kz,phi,t,Ex,Ey,Ez,p) */ 



SHARE

%{
  
  %include "read_table-lib"

%}



DECLARE

%{

  struct {
    
    double Z_A,rho,V;

    int E_c,l_c,mu_c;

  } prms_o,prms_i,prms_a;
  
  t_Table t_o,t_i,t_a;

%}



INITIALIZE

%{
  
  int status;

  prms_i.V = 1;

  prms_a.V = 1;
  /* Checking volumes */

  if (yheight_o && !radius_o){

    if (!zdepth_o) zdepth_o=yheight_o;

    if (!xwidth_o) xwidth_o=yheight_o;

  }else if (!yheight_o && !radius_o){

    fprintf(stderr,"ERROR: (%s): Error: Unmeaningful outer volume description.\n",NAME_CURRENT_COMP);

    exit(-1);
  }

  if (yheight_i && !radius_i){

    if (!zdepth_i) zdepth_i=yheight_i;

    if (!xwidth_i) xwidth_i=yheight_i;

  }else if (!yheight_i && !radius_i){

    fprintf(stderr,"Absorption_sample_2(%s): Warning: Inner volume = 0\n",NAME_CURRENT_COMP);

    prms_i.V=0;

  }
  
if (yheight_a && !radius_a){

    if (!zdepth_a) zdepth_a=yheight_a;

    if (!xwidth_a) xwidth_a=yheight_a;

  }else if (!yheight_a && !radius_a){

    fprintf(stderr,"Absorption_sample_2(%s): Warning: Inner volume = 0\n",NAME_CURRENT_COMP);

    prms_a.V=0;

  }

  /* Loading datafiles */

  if ( material_datafile_o && (status=Table_Read(&t_o,material_datafile_o,0))==-1){

    fprintf(stderr,"Error: Could not parse file \"%s\" in COMP %s\n",material_datafile_o,NAME_CURRENT_COMP);

    exit(-1);

  }

  if (t_o.columns==3) {  /*which column is the energy in and which holds mu*/

    prms_o.E_c=0;prms_o.mu_c=1;

  }else{

    prms_o.E_c=0;prms_o.mu_c=5;

  }

  if(rho_o==0){

    char **header_parsed;

    header_parsed=Table_ParseHeader(t_o.header,"Z","A[r]","rho","Z/A",NULL);

    if(header_parsed[3]){ /*assuming that a Z/A is given, i.e. Z and A[r] are redundant*/

      prms_o.Z_A=strtod(header_parsed[3],NULL);

    }else if ( (strlen(header_parsed[0])) && (strlen(header_parsed[1])) ){

      prms_o.Z_A=strtod(header_parsed[0],NULL)/strtod(header_parsed[1],NULL);

    }

    if(strlen(header_parsed[2])){

      prms_o.rho=strtod(header_parsed[2],NULL);

      printf("rho_o %g\n",prms_o.rho);

    }

  }else{

    prms_o.rho=rho_o;

  }

  if (prms_i.V){ /*if volume is zero - don't bother to read the file*/

    printf("Loading inner datafiles");

    if ( material_datafile_i && (status=Table_Read(&t_i,material_datafile_i,0))==-1){

      fprintf(stderr,"Error: Could not parse file \"%s\" in COMP %s\n",material_datafile_i,NAME_CURRENT_COMP);

      exit(-1);

    }

    if (t_i.columns==3) {

      prms_i.E_c=0;prms_i.mu_c=1;

    }else{

      prms_i.E_c=0;prms_i.mu_c=5;

    }

    if(rho_i==0){ /*when density is not from input, try to read from tables */

      char **header_parsed;

      header_parsed=Table_ParseHeader(t_i.header,"Z","A[r]","rho","Z/A",NULL);

      if(header_parsed[3]){/*assuming that a Z/A is given, i.e. Z and A[r] are redundant*/

        prms_i.Z_A=strtod(header_parsed[3],NULL);

      }else if ( (strlen(header_parsed[0])) && (strlen(header_parsed[1])) ){

        prms_i.Z_A=strtod(header_parsed[0],NULL)/strtod(header_parsed[1],NULL);

      }

      if(strlen(header_parsed[2])){

        prms_i.rho=strtod(header_parsed[2],NULL);

        printf("rho_i %g\n",prms_i.rho);

      }

    }else{ /*read densities from input*/

      prms_i.rho = rho_i;

    }

  }
  if (prms_a.V){ /*if volume is zero - don't bother to read the file*/
    printf("Loading inner datafiles");
    if ( material_datafile_a && (status=Table_Read(&t_a,material_datafile_a,0))==-1){
      fprintf(stderr,"Error: Could not parse file \"%s\" in COMP %s\n",material_datafile_a,NAME_CURRENT_COMP);
      exit(-1);
    }
    if (t_a.columns==3) {
      prms_a.E_c=0;prms_a.mu_c=1;
    }else{
      prms_a.E_c=0;prms_a.mu_c=5;
    }
    if(rho_a==0){ /*when density is not from input, try to read from tables */
      char **header_parsed;
      header_parsed=Table_ParseHeader(t_a.header,"Z","A[r]","rho","Z/A",NULL);
      if(header_parsed[3]){/*assuming that a Z/A is given, i.e. Z and A[r] are redundant*/
        prms_a.Z_A=strtod(header_parsed[3],NULL);
      }else if ( (strlen(header_parsed[0])) && (strlen(header_parsed[1])) ){
        prms_a.Z_A=strtod(header_parsed[0],NULL)/strtod(header_parsed[1],NULL);
      }
      if(strlen(header_parsed[2])){
        prms_a.rho=strtod(header_parsed[2],NULL);
        printf("rho_a %g\n",prms_a.rho);
      }
    }else{ /*read densities from input*/
      prms_a.rho = rho_a;
    }
  }
%}



TRACE

%{

  double l0o=0,l1o=0,l0i=0,l1i=0,l0a=0,l1a=0,mu_o=0,mu_i=0,mu_a=0;

  int status,status_i,status_a;

  if (radius_o && yheight_o){

    status=cylinder_intersect(&l0o,&l1o,x,y,z,kx,ky,kz,radius_o,yheight_o);

  }else{

    status=box_intersect(&l0o,&l1o,x,y,z,kx,ky,kz,xwidth_o,yheight_o,zdepth_o);

  }

  if (status ){ /*rays intersects the enclosing material*/

    PROP_DL(l0o);

    SCATTER;

    status_i=0;

    double k=sqrt(scalar_prod(kx,ky,kz,kx,ky,kz));

    if (radius_i && !yheight_i){

      status_i=sphere_intersect(&l0i,&l1i,(x-x_i),(y-y_i),(z-z_i),kx,ky,kz,radius_i);

    }else if (radius_i && yheight_i){

      status_i=cylinder_intersect(&l0i,&l1i,(x-x_i),(y-y_i),(z-z_i),kx,ky,kz,radius_i,yheight_i);

    }else if (xwidth_i && yheight_i && zdepth_i){

      status_i=box_intersect(&l0i,&l1i,(x-x_i),(y-y_i),(z-z_i),kx,ky,kz,xwidth_i,yheight_i,zdepth_i);

    }

    if(status_i){ /*rays intersect the inclusion*/

      PROP_DL(l0i);

      SCATTER;

      PROP_DL(l1i-l0i);

      SCATTER;

      /*now calculate the mu*/
      mu_i=Table_Value(t_i,k*K2E,prms_i.mu_c)*prms_i.rho;

      p*=exp(-(l1i-l0i)*mu_i*1e2); /* 1e2 to have in m unit */

    }

    PROP_DL(l1o-l0o-l1i);

    SCATTER;
    mu_o=Table_Value(t_o,k*K2E,prms_o.mu_c)*prms_o.rho;

    p*=exp(-(l1o-l0o-(l1i-l0i))*mu_o*1e2);

  }
  if (status ){ /*rays intersects the enclosing material*/
    PROP_DL(l0o);
    SCATTER;
    status_a=0;
    double k_2=sqrt(scalar_prod(kx,ky,kz,kx,ky,kz));
    if (radius_a && yheight_a) {
      status_a = sphere_intersect(&l0a, &l1a, (x-x_a),(y-y_a),(z-z_a), kx, ky, kz, radius_a);
    }else if (radius_a && yheight_a){
      status_a=cylinder_intersect(&l0a,&l1a,(x-x_a),(y-y_a),(z-z_a),kx,ky,kz,radius_a,yheight_a);
    }else if (xwidth_a && yheight_a && zdepth_a){
      status_a=box_intersect(&l0a,&l1a,(x-x_a),(y-y_a),(z-z_a),kx,ky,kz,xwidth_a,yheight_a,zdepth_a);
    }
    if(status_a){ /*rays intersect the inclusion*/
      PROP_DL(l0a);
      SCATTER;
      PROP_DL(l1a-l0a);
      SCATTER;
      /*now calculate the mu*/
      mu_a=Table_Value(t_a,k_2*K2E,prms_a.mu_c)*prms_a.rho;
      p*=exp(-(l1a-l0a)*mu_a*1e2); /* 1e2 to have in m unit */
    }
    PROP_DL(l1o-l0o-l1a);
    SCATTER;
    mu_o=Table_Value(t_o,k_2*K2E,prms_o.mu_c)*prms_o.rho;
    p*=exp(-(l1o-l0o-(l1a-l0a))*mu_o*1e2);
  }
%}



MCDISPLAY

%{

  /* A bit ugly; hard-coded dimensions. */


  
if (radius_o && yheight_o){

    circle("xz",0, yheight_o/2.0,0,radius_o);

    circle("xz",0,-yheight_o/2.0,0,radius_o);

    line(-radius_o,-yheight_o/2.0,0,-radius_o,yheight_o/2.0,0);

    line( radius_o,-yheight_o/2.0,0, radius_o,yheight_o/2.0,0);

    line(0,-yheight_o/2.0,-radius_o,0,yheight_o/2.0,-radius_o);

    line(0,-yheight_o/2.0, radius_o,0,yheight_o/2.0, radius_o);

  }else{

    box(0,0,0,xwidth_o,yheight_o,zdepth_o);

  }



  if (prms_i.V){

    if(radius_i && !yheight_i){

      circle("xz",x_i,y_i,z_i,radius_i);

      circle("yz",x_i,y_i,z_i,radius_i);

      circle("xy",x_i,y_i,z_i,radius_i);
   
 }else if (radius_i && yheight_i){

      circle("xz",x_i,z_i+yheight_i/2.0,z_i,radius_i);

      circle("xz",x_i,z_i-yheight_i/2.0,z_i,radius_i);

      line(x_i-radius_i,y_i-yheight_i/2.0,z_i,x_i-radius_i,yheight_i/2.0,z_i);

      line(x_i+radius_i,y_i-yheight_i/2.0,z_i,x_i+radius_i,yheight_i/2.0,z_i);

      line(x_i,y_i-yheight_i/2.0,z_i-radius_i,x_i,y_i+yheight_i/2.0,z_i-radius_i);

      line(x_i,y_i-yheight_i/2.0,z_i+radius_i,x_i,y_i+yheight_i/2.0,z_i+radius_i);

    }else{

      box(x_i,y_i,z_i,xwidth_i,yheight_i,zdepth_i);

    }

  }

  if (prms_a.V){
    if(radius_a && !yheight_a){
      circle("xz",x_a,y_a,z_a,radius_a);
      circle("yz",x_a,y_a,z_a,radius_a);
      circle("xy",x_a,y_a,z_a,radius_a);   
    }else if (radius_a && yheight_a){
      circle("xz",x_a,z_a+yheight_a/2.0,z_a,radius_a);
      circle("xz",x_a,z_a-yheight_a/2.0,z_a,radius_a);
      line(x_a-radius_a,y_a-yheight_a/2.0,z_a,x_a-radius_a,yheight_a/2.0,z_a);
      line(x_a+radius_a,y_a-yheight_a/2.0,z_a,x_a+radius_a,yheight_a/2.0,z_a);
      line(x_a,y_a-yheight_a/2.0,z_a-radius_a,x_a,y_a+yheight_a/2.0,z_a-radius_a);
      line(x_a,y_a-yheight_a/2.0,z_a+radius_a,x_a,y_a+yheight_a/2.0,z_a+radius_a);
    }else{
      box(x_a,y_a,z_a,xwidth_a,yheight_a,zdepth_a);
    }
  }

%}

END
